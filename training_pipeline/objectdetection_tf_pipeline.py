# -*- coding: utf-8 -*-
"""Custom-objectDetection-TF_pipeline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BnWH5dgCbdYhnUYpMUsYrZ-aO7wpRsw1
"""

#!pip install tensorflow-gpu

import tensorflow as tf
print(tf.__version__)

"""## **Cloning TFOD 2.0 Github**"""

git clone https://github.com/tensorflow/models.git



cd ~/content/models/research



protoc object_detection/protos/*.proto --python_out=.

git clone https://github.com/cocodataset/cocoapi.git

cd cocoapi/PythonAPI

make



cp -r pycocotools ~/content/models/research

"""Dataset Loader """

cd ..

unzip /content/Tree_od.zip

unzip /content/Elephant_od.zip

unzip /content/Bear_od.zip

!unzip /content/Person_od.zip

!unzip /content/Tiger_od.zip

"""Converting Labels to XML files

"""

# Commented out IPython magic to ensure Python compatibility.
# %cd ~/content/

git clone https://github.com/AtriSaxena/OIDv4_to_VOC.git



cd OIDv4_to_VOC

pip install -r requirements.txt

python3 OIDv4_to_VOC.py --sourcepath /content/OID/Dataset/train/Bear --dest_path /content/OID/Dataset/train/Bear

rm -r /content/OID/Dataset/train/Bear/Label

python3 OIDv4_to_VOC.py --sourcepath /content/OID/Dataset/train/Elephant --dest_path /content/OID/Dataset/train/Elephant

rm -r /content/OID/Dataset/train/Elephant/Label

python3 OIDv4_to_VOC.py --sourcepath /content/OID/Dataset/train/Person --dest_path /content/OID/Dataset/train/Person

rm -r /content/OID/Dataset/train/Person/Label

python3 OIDv4_to_VOC.py --sourcepath /content/OID/Dataset/train/Tiger --dest_path /content/OID/Dataset/train/Tiger

rm -r /content/OID/Dataset/train/Tiger/Label

python3 OIDv4_to_VOC.py --sourcepath /content/OID/Dataset/train/Tree --dest_path /content/OID/Dataset/train/Tree

rm -r /content/OID/Dataset/train/Tree/Label

import os

import numpy as np

import shutil

rootdir= '/content/OID/Dataset/train' #path of the original folder

classes = ['Bear' ,  'Elephant',	'Person'	,  'Tiger' , 'Tree' ]

for i in classes:
  os.makedirs(rootdir +'/train/' + i)
  os.makedirs(rootdir +'/test/' + i)
  source = rootdir + '/' + i
  allFileNames = os.listdir(source)
  np.random.shuffle(allFileNames)
  test_ratio = 0.15
  train_FileNames, test_FileNames = np.split(np.array(allFileNames),
                                                      [int(len(allFileNames)* (1 - test_ratio))])

  train_FileNames = [source+'/'+ name for name in train_FileNames.tolist()]
  test_FileNames = [source+'/' + name for name in test_FileNames.tolist()]

  for name in train_FileNames:
    shutil.copy(name, rootdir +'/train/' + i)

  for name in test_FileNames:
    shutil.copy(name, rootdir +'/test/' + i)

"""### Install the Object Detection API"""

cd ..

cd /content/models/research/

cp object_detection/packages/tf2/setup.py .

python -m pip install .

protoc object_detection/protos/*.proto --python_out=.

pip install .

# From within TensorFlow/models/research/
python object_detection/builders/model_builder_tf2_test.py

cd /content/trainingdemo/models

wget http://download.tensorflow.org/models/object_detection/tf2/20200711/ssd_resnet101_v1_fpn_640x640_coco17_tpu-8.tar.gz

tar -xvf ssd_resnet101_v1_fpn_640x640_coco17_tpu-8.tar.gz

pwd

cd /content/trainingdemo

ls

rm -r /content/trainingdemo/images/train

import os
import shutil
xml=0
jpg=0
for folder in os.listdir('/content/OID/Dataset/train/'):
  if folder=='train' or folder=='test':
    break
  for im in os.listdir('/content/OID/Dataset/train/'+folder):
    if os.path.splitext(im)[1]=='.xml':
      xml+=1
    else:
      jpg+=1  
    shutil.copy('/content/OID/Dataset/train/'+folder+'/'+im,'/content/trainingdemo/images/train')

import glob
c=0
jpg_file=[]
for f in glob.glob('/content/trainingdemo/images/train/*.xml'):
  f_name=os.path.splitext(f)[0]
  jpg_file.append(f_name)
for f_xml in glob.glob('/content/trainingdemo/images/train/*.jpg'):
    if os.path.splitext(f_xml)[0] not in jpg_file:
      os.remove(f_xml)

jpg_file=[]
for f in glob.glob('/content/trainingdemo/images/train/*.jpg'):
  f_name=os.path.splitext(f)[0]
  jpg_file.append(f_name)
for f_xml in glob.glob('/content/trainingdemo/images/train/*.xml'):
    if os.path.splitext(f_xml)[0] not in jpg_file:
      os.remove(f_xml)



# Create train data:
python generate_tfrecord.py -x /content/trainingdemo/images/train -l /content/trainingdemo/annotations/label_map.pbtxt -o /content/trainingdemo/annotations/train.record

# Create test data:
python generate_tfrecord.py -x /content/trainingdemo/images/test -l /content/trainingdemo/annotations/label_map.pbtxt -o /content/trainingdemo/annotations/test.record

python model_main_tf2.py --model_dir=/content/trainingdemo/models/my_ssd_resnet101_v1_fpn --pipeline_config_path=/content/trainingdemo/models/my_ssd_resnet101_v1_fpn/pipeline.config